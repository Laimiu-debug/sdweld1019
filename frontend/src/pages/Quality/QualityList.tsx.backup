import React, { useState, useEffect, useRef } from 'react'
import {
  Card,
  Table,
  Button,
  Input,
  Space,
  Tag,
  Modal,
  Form,
  Select,
  DatePicker,
  InputNumber,
  message,
  Tooltip,
  Dropdown,
  Badge,
  Row,
  Col,
  Statistic,
  Alert,
  Divider,
  Tabs,
  Descriptions,
  Progress,
  Timeline,
  Upload,
  Typography,
  Popconfirm,
  Spin,
  Empty,
} from 'antd'
import type { ColumnsType, TableProps } from 'antd/es/table'
import {
  PlusOutlined,
  SearchOutlined,
  EditOutlined,
  DeleteOutlined,
  ExportOutlined,
  ImportOutlined,
  FilterOutlined,
  MoreOutlined,
  WarningOutlined,
  CheckCircleOutlined,
  ExclamationCircleOutlined,
  EyeOutlined,
  FileTextOutlined,
  UploadOutlined,
  CalendarOutlined,
  UserOutlined,
  ToolOutlined,
  ClockCircleOutlined,
  CameraOutlined,
  BugOutlined,
  ReloadOutlined,
  PlayCircleOutlined,
  PauseCircleOutlined,
  StopOutlined,
  CloseCircleOutlined,
} from '@ant-design/icons'
import { useNavigate } from 'react-router-dom'
import dayjs from 'dayjs'
import { useAuthStore } from '@/store/authStore'
import qualityService from '@/services/quality'
import type { QualityInspection, QualityInspectionCreate, QualityInspectionUpdate } from '@/services/quality'
import workspaceService from '@/services/workspace'

const { Title, Text } = Typography
const { Search } = Input
const { RangePicker } = DatePicker
const { Option } = Select
const { TextArea } = Input

// 类型定义
type InspectionType = 'visual' | 'radiographic' | 'ultrasonic' | 'magnetic_particle' | 'liquid_penetrant' | 'destructive'
type InspectionResult = 'pass' | 'fail' | 'conditional'

const QualityList: React.FC = () => {
  const navigate = useNavigate()
  const { checkPermission, canCreateMore, currentWorkspace } = useAuthStore()
  const tableRef = useRef<any>(null)
  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([])
  const [searchText, setSearchText] = useState('')
  const [typeFilter, setTypeFilter] = useState<string>('')
  const [resultFilter, setResultFilter] = useState<string>('')
  const [loading, setLoading] = useState(false)
  const [inspections, setInspections] = useState<QualityInspection[]>([])
  const [total, setTotal] = useState(0)
  const [currentPage, setCurrentPage] = useState(1)
  const [pageSize, setPageSize] = useState(20)
  const [isModalVisible, setIsModalVisible] = useState(false)
  const [modalType, setModalType] = useState<'create' | 'edit' | 'view'>('create')
  const [currentInspection, setCurrentInspection] = useState<QualityInspection | null>(null)
  const [form] = Form.useForm()

  // 获取质量检验列表
  const fetchInspections = async () => {
    const currentWorkspace = workspaceService.getCurrentWorkspaceFromStorage()
    if (!currentWorkspace) {
      message.warning('请先选择工作区')
      return
    }

    setLoading(true)
    try {
      const params = {
        workspace_type: currentWorkspace.type,
        company_id: currentWorkspace.type === 'enterprise' ? currentWorkspace.company_id : undefined,
        factory_id: currentWorkspace.factory_id,
        skip: (currentPage - 1) * pageSize,
        limit: pageSize,
        search: searchText || undefined,
        inspection_type: typeFilter || undefined,
        result: resultFilter || undefined,
      }

      console.log('获取质量检验列表 - 请求参数:', params)
      console.log('当前工作区:', currentWorkspace)

      const response = await qualityService.getQualityInspectionList(params)

      console.log('获取质量检验列表 - 响应:', response)

      // 后端返回的数据已经被api拦截器包装了一层，所以需要访问response.data.data
      if (response.success && response.data?.success) {
        const { items, total: totalCount } = response.data.data
        console.log('质量检验数据:', items)
        console.log('总数:', totalCount)
        setInspections(items || [])
        setTotal(totalCount || 0)
      } else {
        message.error('获取质量检验列表失败')
      }
    } catch (error: any) {
      console.error('获取质量检验列表失败:', error)
      if (error.response?.data?.detail) {
        message.error(error.response.data.detail)
      } else {
        message.error('获取质量检验列表失败，请稍后重试')
      }
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchInspections()
  }, [currentPage, pageSize, searchText, typeFilter, resultFilter])

  // 处理创建质量检验
  const handleCreate = () => {
    setModalType('create')
    setCurrentInspection(null)
    form.resetFields()
    setIsModalVisible(true)
  }

  // 处理编辑质量检验
  const handleEdit = (inspection: QualityInspection) => {
    setModalType('edit')
    setCurrentInspection(inspection)
    form.setFieldsValue({
      inspection_number: inspection.inspection_number,
      inspection_type: inspection.inspection_type,
      inspection_date: inspection.inspection_date ? dayjs(inspection.inspection_date) : undefined,
      inspector_id: inspection.inspector_id,
      inspector_name: inspection.inspector_name,
      inspector_certification: inspection.inspector_certification,
      production_task_id: inspection.production_task_id,
      welder_id: inspection.welder_id,
      equipment_id: inspection.equipment_id,
      joint_number: inspection.joint_number,
      weld_location: inspection.weld_location,
      inspection_standard: inspection.inspection_standard,
      acceptance_criteria: inspection.acceptance_criteria,
      quality_level: inspection.quality_level,
      inspection_method: inspection.inspection_method,
      ndt_method: inspection.ndt_method,
      equipment_used: inspection.equipment_used,
      result: inspection.result,
      is_qualified: inspection.is_qualified,
      defects_found: inspection.defects_found,
      defect_details: inspection.defect_details,
      corrective_actions: inspection.corrective_actions,
      rework_required: inspection.rework_required,
      follow_up_required: inspection.follow_up_required,
    })
    setIsModalVisible(true)
  }

  // 处理查看质量检验
  const handleView = (inspection: QualityInspection) => {
    setModalType('view')
    setCurrentInspection(inspection)
    setIsModalVisible(true)
  }

  // 处理删除质量检验
  const handleDelete = async (inspectionId: number) => {
    const currentWorkspace = workspaceService.getCurrentWorkspaceFromStorage()
    if (!currentWorkspace) {
      message.warning('请先选择工作区')
      return
    }

    Modal.confirm({
      title: '确认删除',
      content: '确定要删除这条质量检验记录吗？此操作不可恢复。',
      okText: '确定',
      cancelText: '取消',
      onOk: async () => {
        try {
          const response = await qualityService.deleteQualityInspection(
            inspectionId,
            currentWorkspace.type,
            currentWorkspace.type === 'enterprise' ? currentWorkspace.company_id : undefined,
            currentWorkspace.factory_id
          )

          if (response.success) {
            message.success('删除成功')
            fetchInspections() // 重新加载列表
          } else {
            message.error('删除失败')
          }
        } catch (error: any) {
          console.error('删除质量检验失败:', error)
          if (error.response?.data?.detail) {
            message.error(error.response.data.detail)
          } else {
            message.error('删除失败，请稍后重试')
          }
        }
      },
    })
  }

  // 处理批量删除
  const handleBatchDelete = async () => {
    const currentWorkspace = workspaceService.getCurrentWorkspaceFromStorage()
    if (!currentWorkspace) {
      message.warning('请先选择工作区')
      return
    }

    if (selectedRowKeys.length === 0) {
      message.warning('请先选择要删除的质量检验')
      return
    }

    Modal.confirm({
      title: '确认批量删除',
      content: `确定要删除选中的 ${selectedRowKeys.length} 条质量检验记录吗？此操作不可恢复。`,
      okText: '确定',
      cancelText: '取消',
      onOk: async () => {
        try {
          const response = await qualityService.batchDeleteQualityInspections(
            selectedRowKeys.map(key => Number(key)),
            currentWorkspace.type,
            currentWorkspace.type === 'enterprise' ? currentWorkspace.company_id : undefined,
            currentWorkspace.factory_id
          )

          if (response.success) {
            message.success('批量删除成功')
            setSelectedRowKeys([])
            fetchInspections() // 重新加载列表
          } else {
            message.error('批量删除失败')
          }
        } catch (error: any) {
          console.error('批量删除质量检验失败:', error)
          if (error.response?.data?.detail) {
            message.error(error.response.data.detail)
          } else {
            message.error('批量删除失败，请稍后重试')
          }
        }
      },
    })
  }

  // 处理表单提交
  const handleModalOk = async () => {
    const currentWorkspace = workspaceService.getCurrentWorkspaceFromStorage()
    if (!currentWorkspace) {
      message.warning('请先选择工作区')
      return
    }

    try {
      const values = await form.validateFields()

      // 转换日期格式
      const formData: QualityInspectionCreate | QualityInspectionUpdate = {
        ...values,
        inspection_date: values.inspection_date ? values.inspection_date.format('YYYY-MM-DD') : undefined,
      }

      setLoading(true)

      if (modalType === 'create') {
        const response = await qualityService.createQualityInspection(
          formData as QualityInspectionCreate,
          currentWorkspace.type,
          currentWorkspace.type === 'enterprise' ? currentWorkspace.company_id : undefined,
          currentWorkspace.factory_id
        )

        if (response.success) {
          message.success('创建成功')
          setIsModalVisible(false)
          form.resetFields()
          fetchInspections() // 重新加载列表
        } else {
          message.error('创建失败')
        }
      } else if (modalType === 'edit' && currentInspection) {
        const response = await qualityService.updateQualityInspection(
          currentInspection.id,
          formData as QualityInspectionUpdate,
          currentWorkspace.type,
          currentWorkspace.type === 'enterprise' ? currentWorkspace.company_id : undefined,
          currentWorkspace.factory_id
        )

        if (response.success) {
          message.success('更新成功')
          setIsModalVisible(false)
          form.resetFields()
          fetchInspections() // 重新加载列表
        } else {
          message.error('更新失败')
        }
      }
    } catch (error: any) {
      console.error('操作失败:', error)
      if (error.response?.data?.detail) {
        message.error(error.response.data.detail)
      } else if (error.errorFields) {
        message.error('请检查表单填写是否正确')
      } else {
        message.error('操作失败，请稍后重试')
      }
    } finally {
      setLoading(false)
    }
  }

  // 处理模态框取消
  const handleModalCancel = () => {
    setIsModalVisible(false)
    form.resetFields()
    setCurrentInspection(null)
  }

  // 辅助函数 - 获取检验类型配置
  const getInspectionTypeConfig = (type: InspectionType) => {
    const typeConfig: Record<InspectionType, { color: string; text: string }> = {
      visual: { color: 'blue', text: '外观检验' },
      radiographic: { color: 'green', text: '射线检验' },
      ultrasonic: { color: 'orange', text: '超声波检验' },
      magnetic_particle: { color: 'purple', text: '磁粉检验' },
      liquid_penetrant: { color: 'cyan', text: '渗透检验' },
      destructive: { color: 'red', text: '破坏性检验' },
    }
    return typeConfig[type] || { color: 'default', text: type }
  }

  // 辅助函数 - 获取检验结果配置
  const getResultConfig = (result: InspectionResult) => {
    const resultConfig: Record<InspectionResult, { color: string; text: string; icon: React.ReactNode }> = {
      pass: { color: 'success', text: '合格', icon: <CheckCircleOutlined /> },
      fail: { color: 'error', text: '不合格', icon: <CloseCircleOutlined /> },
      conditional: { color: 'warning', text: '有条件合格', icon: <ExclamationCircleOutlined /> },
    }
    return resultConfig[result] || resultConfig.pass
  }

  // 表格列配置
  const columns: ColumnsType<QualityInspection> = [
    {
      title: '检验编号',
      dataIndex: 'inspection_number',
      key: 'inspection_number',
      width: 150,
      fixed: 'left',
      render: (text: string, record: QualityInspection) => (
        <Button type="link" onClick={() => navigate(`/quality/${record.id}`)}>
          {text}
        </Button>
      ),
    },
    {
      title: '检验类型',
      dataIndex: 'inspection_type',
      key: 'inspection_type',
      width: 120,
      render: (type: InspectionType) => {
        const config = getInspectionTypeConfig(type)
        return <Tag color={config.color}>{config.text}</Tag>
      },
    },
    {
      title: '检验状态',
      dataIndex: 'status',
      key: 'status',
      width: 120,
      render: (status: InspectionStatus) => {
        const config = getStatusConfig(status)
        return (
          <Tag color={config.color} icon={config.icon}>
            {config.text}
          </Tag>
        )
      },
    },
    {
      title: '检验结果',
      dataIndex: 'result',
      key: 'result',
      width: 120,
      render: (result: InspectionResult) => {
        const config = getResultConfig(result)
        return (
          <Tag color={config.color} icon={config.icon}>
            {config.text}
          </Tag>
        )
      },
    },
    {
      title: '检验日期',
      dataIndex: 'inspection_date',
      key: 'inspection_date',
      width: 120,
      render: (date: string) => dayjs(date).format('YYYY-MM-DD'),
    },
    {
      title: '检验员',
      dataIndex: 'inspector_name',
      key: 'inspector_name',
      width: 100,
      render: (name: string, record: QualityInspection) => (
        <Space direction="vertical" size="small">
          <Text strong>{name}</Text>
          <Text type="secondary" style={{ fontSize: '12px' }}>
            {record.inspector_id}
          </Text>
        </Space>
      ),
    },
    {
      title: '生产任务',
      dataIndex: 'production_task_id',
      key: 'production_task_id',
      width: 150,
      render: (taskId: string) => {
        const taskNames: Record<string, string> = {
          '1': '压力容器筒体焊接',
          '2': '管道对接焊缝修复',
          '3': '不锈钢储罐焊接',
          '4': '热交换器管束焊接',
          '5': '储罐罐底焊接',
        }
        return (
          <Space direction="vertical" size="small">
            <Text>{taskNames[taskId] || '未知任务'}</Text>
            <Text type="secondary" style={{ fontSize: '12px' }}>
              任务ID: {taskId}
            </Text>
          </Space>
        )
      },
    },
    {
      title: '缺陷情况',
      dataIndex: 'defects_found',
      key: 'defects_found',
      width: 150,
      render: (defects: Record<string, any>) => {
        const defectCount = Object.keys(defects).length
        if (defectCount === 0) {
          return <Tag color="success">无缺陷</Tag>
        } else {
          return (
            <Space direction="vertical" size="small">
              <Badge count={defectCount} style={{ backgroundColor: '#f5222d' }} />
              <Text type="secondary">发现缺陷</Text>
            </Space>
          )
        }
      },
    },
    {
      title: '跟进行动',
      key: 'follow_up',
      width: 150,
      render: (_, record: QualityInspection) => {
        if (!record.follow_up_required) {
          return <Tag color="success">无需跟进</Tag>
        }

        const isOverdue = record.follow_up_date && dayjs(record.follow_up_date).isBefore(dayjs())
        const isDueSoon = record.follow_up_date && dayjs(record.follow_up_date).diff(dayjs(), 'days') <= 3

        return (
          <Space direction="vertical" size="small">
            <Tag color={isOverdue ? 'error' : isDueSoon ? 'warning' : 'processing'}>
              需要跟进
            </Tag>
            {record.follow_up_date && (
              <Text type="secondary" style={{ fontSize: '12px' }}>
                截止: {dayjs(record.follow_up_date).format('MM-DD')}
              </Text>
            )}
          </Space>
        )
      },
    },
    {
      title: '下次检验',
      dataIndex: 'next_inspection_date',
      key: 'next_inspection_date',
      width: 130,
      render: (date: string) => {
        if (!date) return '-'

        const isOverdue = dayjs(date).isBefore(dayjs())
        const isDueSoon = dayjs(date).diff(dayjs(), 'days') <= 7

        return (
          <Space direction="vertical" size="small">
            <Text>{dayjs(date).format('YYYY-MM-DD')}</Text>
            {isOverdue && <Tag color="error" style={{ fontSize: '11px' }}>已逾期</Tag>}
            {!isOverdue && isDueSoon && <Tag color="warning" style={{ fontSize: '11px' }}>即将到期</Tag>}
          </Space>
        )
      },
    },
    {
      title: '附件',
      dataIndex: 'attachments',
      key: 'attachments',
      width: 80,
      render: (attachments: string[]) => {
        if (attachments.length === 0) {
          return <Text type="secondary">-</Text>
        }
        return (
          <Space>
            <CameraOutlined />
            <Text>{attachments.length}</Text>
          </Space>
        )
      },
    },
    {
      title: '操作',
      key: 'actions',
      width: 180,
      fixed: 'right',
      render: (_, record: QualityInspection) => (
        <Space size="small">
          <Tooltip title="查看详情">
            <Button
              type="text"
              icon={<EyeOutlined />}
              onClick={() => navigate(`/quality/${record.id}`)}
            />
          </Tooltip>
          {checkPermission('quality.update') && (
            <Tooltip title="编辑">
              <Button
                type="text"
                icon={<EditOutlined />}
                onClick={() => handleEdit(record)}
              />
            </Tooltip>
          )}
          <Tooltip title="更多操作">
            <Dropdown
              menu={{
                items: [
                  {
                    key: 'view-report',
                    label: '查看报告',
                    icon: <FileTextOutlined />,
                    onClick: () => navigate(`/quality/${record.id}/report`),
                  },
                  {
                    key: 'export',
                    label: '导出数据',
                    icon: <ExportOutlined />,
                    onClick: () => handleExport(record.id),
                  },
                  ...(checkPermission('quality.delete') ? [
                    {
                      type: 'divider',
                    },
                    {
                      key: 'delete',
                      label: '删除',
                      icon: <DeleteOutlined />,
                      danger: true,
                      onClick: () => handleDelete(record.id),
                    },
                  ] : []),
                ],
              }}
            >
              <Button type="text" icon={<MoreOutlined />} />
            </Dropdown>
          </Tooltip>
        </Space>
      ),
    },
  ]

  // 处理函数
  const handleSearch = (value: string) => {
    setSearchText(value)
    setPagination(prev => ({ ...prev, current: 1 }))
  }

  const handleTypeFilter = (value: InspectionType | '') => {
    setTypeFilter(value)
    setPagination(prev => ({ ...prev, current: 1 }))
  }

  const handleResultFilter = (value: InspectionResult | '') => {
    setResultFilter(value)
    setPagination(prev => ({ ...prev, current: 1 }))
  }

  const handleStatusFilter = (value: InspectionStatus | '') => {
    setStatusFilter(value)
    setPagination(prev => ({ ...prev, current: 1 }))
  }

  const handleDateRangeChange = (dates: [dayjs.Dayjs, dayjs.Dayjs] | null) => {
    setDateRange(dates)
    setPagination(prev => ({ ...prev, current: 1 }))
  }

  const handleTableChange = (page: number, pageSize: number) => {
    setPagination(prev => ({ ...prev, current: page, pageSize }))
  }

  const handleCreate = () => {
    setModalType('create')
    setCurrentInspection(null)
    setDefects([])
    form.resetFields()
    form.setFieldsValue({
      inspectionDate: dayjs(),
      inspectionType: 'visual',
      status: 'pending',
    })
    setIsModalVisible(true)
  }

  const handleEdit = (record: QualityInspection) => {
    setModalType('edit')
    setCurrentInspection(record)
    setDefects([])
    form.setFieldsValue({
      inspection_number: record.inspection_number,
      project_name: record.production_task_id, // 临时使用,应该从任务中获取项目名称
      inspection_type: record.inspection_type,
      welding_method: record.inspector_name, // 临时使用,需要从后端获取
      inspector_name: record.inspector_name,
      inspection_date: record.inspection_date ? dayjs(record.inspection_date) : null,
      welder: record.inspector_id, // 临时使用,需要从后端获取
      wps_standard: 'WPS-001', // 临时使用,需要从后端获取
      material_spec: '', // 需要从后端获取
      joint_type: 'butt', // 临时使用,需要从后端获取
      result: record.result,
      inspection_description: record.notes,
      conclusion: record.corrective_actions,
      recommendations: record.notes,
    })
    setIsModalVisible(true)
  }

  const handleSubmit = async () => {
    try {
      const values = await form.validateFields()

      // 获取工作区信息
      const workspaceType = currentWorkspace?.type || 'personal'
      const companyId = currentWorkspace?.type === 'enterprise' ? currentWorkspace.companyId : undefined
      const factoryId = currentWorkspace?.type === 'enterprise' ? currentWorkspace.factoryId : undefined

      // 格式化数据
      const formData: any = {
        inspection_number: values.inspection_number,
        inspection_type: values.inspection_type || 'routine',
        inspection_date: values.inspection_date ? values.inspection_date.format('YYYY-MM-DD') : dayjs().format('YYYY-MM-DD'),
        inspector_id: 1, // 临时使用固定值,实际应该从用户信息获取
        inspector_name: values.inspector_name || undefined,
        result: values.result || 'pending',
        notes: values.notes || undefined,
      }

      if (modalType === 'create') {
        const response = await createQualityInspection(formData, workspaceType, companyId, factoryId)
        message.success('质量检验创建成功')
      } else if (currentInspection) {
        const response = await updateQualityInspection(parseInt(currentInspection.id), formData, workspaceType, companyId, factoryId)
        message.success('质量检验更新成功')
      }

      setIsModalVisible(false)
      form.resetFields()
      setDefects([])
      refetch()
    } catch (error: any) {
      console.error('提交质量检验失败:', error)
      if (error.response?.data?.detail) {
        // 处理后端验证错误
        const detail = error.response.data.detail
        if (Array.isArray(detail)) {
          // Pydantic验证错误
          const errorMessages = detail.map((err: any) => `${err.loc.join('.')}: ${err.msg}`).join('; ')
          message.error(`验证失败: ${errorMessages}`)
        } else if (typeof detail === 'string') {
          message.error(detail)
        } else {
          message.error('操作失败，请检查输入')
        }
      } else if (error.errorFields) {
        message.error('请检查表单填写')
      } else {
        message.error('操作失败，请稍后重试')
      }
    }
  }

  const addDefect = () => {
    const newDefect: DefectRecord = {
      id: Date.now().toString(),
      inspection_id: currentInspection?.id || '',
      defect_type: '',
      severity: 'minor',
      description: '',
      location: '',
      size: '',
      quantity: 1,
      images: [],
      repair_method: '',
      repair_status: 'pending',
      detected_by: '',
      detected_date: dayjs().format('YYYY-MM-DD'),
    }
    setDefects([...defects, newDefect])
  }

  const removeDefect = (id: string) => {
    setDefects(defects.filter(d => d.id !== id))
  }

  const updateDefect = (id: string, field: keyof DefectRecord, value: any) => {
    setDefects(defects.map(d => d.id === id ? { ...d, [field]: value } : d))
  }

  const handleExport = async (id: string) => {
    try {
      message.success('导出成功')
    } catch (error) {
      message.error('导出失败')
    }
  }

  const handleDelete = async (id: string) => {
    try {
      const workspaceType = currentWorkspace?.type || 'personal'
      const companyId = currentWorkspace?.type === 'enterprise' ? currentWorkspace.companyId : undefined
      const factoryId = currentWorkspace?.type === 'enterprise' ? currentWorkspace.factoryId : undefined

      await deleteQualityInspection(parseInt(id), workspaceType, companyId, factoryId)
      message.success('删除成功')
      refetch()
    } catch (error) {
      message.error('删除失败')
    }
  }

  const handleBatchOperation = async (action: string) => {
    if (selectedRowKeys.length === 0) {
      message.warning('请选择要操作的记录')
      return
    }

    try {
      message.success(`${action}成功`)
      setSelectedRowKeys([])
      refetch()
    } catch (error) {
      message.error(`${action}失败`)
    }
  }

  const onSelectChange = (newSelectedRowKeys: React.Key[]) => {
    setSelectedRowKeys(newSelectedRowKeys)
  }

  const rowSelection = {
    selectedRowKeys,
    onChange: onSelectChange,
  }

  return (
    <div className="page-container">
      <div className="page-header">
        <Title level={2}>质量管理</Title>
      </div>

      {/* 统计卡片区域 */}
      {statistics && (
        <Row gutter={[16, 16]} className="mb-6">
          <Col xs={24} sm={12} md={6}>
            <Card>
              <Statistic
                title="总检验数"
                value={statistics.total_inspections}
                prefix={<CheckCircleOutlined />}
                valueStyle={{ color: '#1890ff' }}
              />
            </Card>
          </Col>
          <Col xs={24} sm={12} md={6}>
            <Card>
              <Statistic
                title="合格率"
                value={statistics.pass_rate}
                precision={1}
                suffix="%"
                prefix={<CheckCircleOutlined />}
                valueStyle={{ color: '#52c41a' }}
              />
            </Card>
          </Col>
          <Col xs={24} sm={12} md={6}>
            <Card>
              <Statistic
                title="待跟进"
                value={statistics.urgent_follow_ups}
                prefix={<WarningOutlined />}
                valueStyle={{ color: '#fa8c16' }}
              />
            </Card>
          </Col>
          <Col xs={24} sm={12} md={6}>
            <Card>
              <Statistic
                title="逾期检验"
                value={statistics.overdue_inspections}
                prefix={<ExclamationCircleOutlined />}
                valueStyle={{ color: '#f5222d' }}
              />
            </Card>
          </Col>
        </Row>
      )}

      <Card>
        {/* 搜索和筛选区域 */}
        <Row gutter={[16, 16]} className="mb-4">
          <Col xs={24} sm={12} md={6}>
            <Search
              placeholder="搜索检验编号或检验员"
              allowClear
              enterButton={<SearchOutlined />}
              size="large"
              onSearch={handleSearch}
            />
          </Col>
          <Col xs={24} sm={12} md={4}>
            <Select
              placeholder="检验类型"
              allowClear
              size="large"
              style={{ width: '100%' }}
              onChange={handleTypeFilter}
            >
              <Option value="visual">外观检验</Option>
              <Option value="radiographic">射线检验</Option>
              <Option value="ultrasonic">超声波检验</Option>
              <Option value="magnetic_particle">磁粉检验</Option>
              <Option value="liquid_penetrant">渗透检验</Option>
              <Option value="destructive">破坏性检验</Option>
            </Select>
          </Col>
          <Col xs={24} sm={12} md={4}>
            <Select
              placeholder="检验状态"
              allowClear
              size="large"
              style={{ width: '100%' }}
              onChange={handleStatusFilter}
            >
              <Option value="pending">待开始</Option>
              <Option value="in_progress">进行中</Option>
              <Option value="completed">已完成</Option>
              <Option value="requires_follow_up">需要跟进</Option>
              <Option value="cancelled">已取消</Option>
            </Select>
          </Col>
          <Col xs={24} sm={12} md={4}>
            <Select
              placeholder="检验结果"
              allowClear
              size="large"
              style={{ width: '100%' }}
              onChange={handleResultFilter}
            >
              <Option value="pass">合格</Option>
              <Option value="fail">不合格</Option>
              <Option value="conditional">有条件合格</Option>
            </Select>
          </Col>
          <Col xs={24} sm={12} md={6}>
            <RangePicker
              placeholder={['开始日期', '结束日期']}
              size="large"
              style={{ width: '100%' }}
              onChange={handleDateRangeChange}
            />
          </Col>
        </Row>

        {/* 操作按钮区域 */}
        <Row gutter={[16, 16]} className="mb-4">
          <Col>
            <Space>
              <Button
                type="primary"
                icon={<PlusOutlined />}
                size="large"
                onClick={handleCreate}
                disabled={!canCreateMore('quality', qualityData?.data?.total || 0)}
              >
                创建检验
              </Button>
              <Button
                icon={<ReloadOutlined />}
                size="large"
                onClick={() => refetch()}
              >
                刷新
              </Button>
              <Button
                icon={<ExportOutlined />}
                size="large"
                onClick={() => handleBatchOperation('导出')}
              >
                批量导出
              </Button>
              <Button
                icon={<ImportOutlined />}
                size="large"
              >
                导入数据
              </Button>
            </Space>
          </Col>
        </Row>

        {/* 批量操作区域 */}
        {selectedRowKeys.length > 0 && (
          <Alert
            message={`已选择 ${selectedRowKeys.length} 项`}
            description={
              <Space>
                <Button size="small" onClick={() => handleBatchOperation('批量导出')}>
                  批量导出
                </Button>
                {checkPermission('quality.delete') && (
                  <Popconfirm
                    title="确定要删除选中的记录吗？"
                    description="删除后将无法恢复"
                    onConfirm={() => handleBatchOperation('删除')}
                    icon={<ExclamationCircleOutlined style={{ color: 'red' }} />}
                    okText="确定"
                    cancelText="取消"
                  >
                    <Button size="small" danger>
                      批量删除
                    </Button>
                  </Popconfirm>
                )}
              </Space>
            }
            type="info"
            showIcon
            className="mb-4"
            closable
            onClose={() => setSelectedRowKeys([])}
          />
        )}

        {/* 表格区域 */}
        <Table<QualityInspection>
          ref={tableRef}
          columns={columns}
          dataSource={qualityData?.data?.items}
          rowKey="id"
          loading={isLoading}
          pagination={{
            current: pagination.current,
            pageSize: pagination.pageSize,
            total: pagination.total,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total, range) =>
              `第 ${range[0]}-${range[1]} 条，共 ${total} 条`,
            onChange: handleTableChange,
          }}
          rowSelection={rowSelection}
          scroll={{ x: 1600 }}
          size="middle"
          // 配置避免使用 findDOMNode
          getPopupContainer={(triggerNode) => triggerNode.parentElement || document.body}
          // 优化渲染性能
          components={{
            body: {
              // 自定义表格体组件，避免 findDOMNode
              cell: ({ children, ...props }) => (
                <td {...props}>{children}</td>
              ),
            },
          }}
        />
      </Card>

      {/* 创建/编辑质量检验弹窗 */}
      <Modal
        title={modalType === 'create' ? '创建质量检验' : '编辑质量检验'}
        open={isModalVisible}
        onCancel={() => {
          setIsModalVisible(false)
          form.resetFields()
          setDefects([])
        }}
        onOk={handleSubmit}
        width={1000}
        okText="保存"
        cancelText="取消"
      >
        <Form
          form={form}
          layout="vertical"
          initialValues={{
            inspectionDate: dayjs(),
            inspectionType: 'visual',
            status: 'pending',
          }}
        >
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="inspection_number"
                label="检验编号"
                rules={[{ required: true, message: '请输入检验编号' }]}
              >
                <Input placeholder="例如: QI-2024-001" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="project_name"
                label="项目名称"
              >
                <Input placeholder="例如: 压力容器制造项目" />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="inspection_type"
                label="检验类型"
              >
                <Select placeholder="选择检验类型">
                  <Option value="routine">例行检验</Option>
                  <Option value="acceptance">验收检验</Option>
                  <Option value="process">过程检验</Option>
                  <Option value="final">最终检验</Option>
                  <Option value="rework">返修检验</Option>
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="welding_method"
                label="焊接方法"
              >
                <Select placeholder="选择焊接方法">
                  <Option value="SMAW">焊条电弧焊</Option>
                  <Option value="GMAW">熔化极气体保护焊</Option>
                  <Option value="GTAW">钨极氩弧焊</Option>
                  <Option value="FCAW">药芯焊丝电弧焊</Option>
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="inspector_name"
                label="检验员"
              >
                <Input placeholder="检验员姓名" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="inspection_date"
                label="检验日期"
              >
                <DatePicker style={{ width: '100%' }} />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="welder"
                label="焊工"
              >
                <Input placeholder="焊工姓名" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="wps_standard"
                label="WPS标准"
              >
                <Select placeholder="选择WPS标准">
                  <Option value="WPS-001">碳钢焊接工艺规程</Option>
                  <Option value="WPS-002">不锈钢焊接工艺规程</Option>
                  <Option value="WPS-003">铝合金焊接工艺规程</Option>
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="material_spec"
                label="材料规格"
              >
                <Input placeholder="例如: Q345R δ=12mm" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="joint_type"
                label="接头类型"
              >
                <Select placeholder="选择接头类型">
                  <Option value="butt">对接接头</Option>
                  <Option value="lap">搭接接头</Option>
                  <Option value="corner">角接接头</Option>
                  <Option value="T">T型接头</Option>
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="result"
            label="检验结果"
          >
            <Select placeholder="选择检验结果">
              <Option value="qualified">合格</Option>
              <Option value="conditional_qualified">有条件合格</Option>
              <Option value="unqualified">不合格</Option>
            </Select>
          </Form.Item>

          <Form.Item
            name="inspection_description"
            label="检验描述"
          >
            <Input.TextArea
              rows={4}
              placeholder="请详细描述检验过程、方法、标准等..."
            />
          </Form.Item>

          <Divider />

          <Title level={5}>缺陷记录</Title>

          <div className="mb-4">
            <Button
              type="dashed"
              icon={<PlusOutlined />}
              onClick={addDefect}
              block
            >
              添加缺陷记录
            </Button>
          </div>

          {defects.length > 0 && (
            <Table
              columns={[
                {
                  title: '缺陷类型',
                  dataIndex: 'defect_type',
                  key: 'defect_type',
                  render: (type: string, record: DefectRecord) => (
                    <Select
                      value={type}
                      onChange={(value) => updateDefect(record.id, 'defect_type', value)}
                      style={{ width: '100%' }}
                      placeholder="选择缺陷类型"
                    >
                      <Option value="裂纹">裂纹</Option>
                      <Option value="气孔">气孔</Option>
                      <Option value="夹渣">夹渣</Option>
                      <Option value="未焊透">未焊透</Option>
                      <Option value="未熔合">未熔合</Option>
                      <Option value="咬边">咬边</Option>
                      <Option value="焊瘤">焊瘤</Option>
                      <Option value="其他">其他</Option>
                    </Select>
                  ),
                },
                {
                  title: '严重程度',
                  dataIndex: 'severity',
                  key: 'severity',
                  render: (severity: string, record: DefectRecord) => (
                    <Select
                      value={severity}
                      onChange={(value) => updateDefect(record.id, 'severity', value)}
                      style={{ width: '100%' }}
                    >
                      <Option value="minor">轻微</Option>
                      <Option value="major">严重</Option>
                      <Option value="critical">致命</Option>
                    </Select>
                  ),
                },
                {
                  title: '位置',
                  dataIndex: 'location',
                  key: 'location',
                  render: (location: string, record: DefectRecord) => (
                    <Input
                      value={location}
                      onChange={(e) => updateDefect(record.id, 'location', e.target.value)}
                      placeholder="缺陷位置"
                    />
                  ),
                },
                {
                  title: '尺寸',
                  dataIndex: 'size',
                  key: 'size',
                  render: (size: string, record: DefectRecord) => (
                    <Input
                      value={size}
                      onChange={(e) => updateDefect(record.id, 'size', e.target.value)}
                      placeholder="缺陷尺寸"
                    />
                  ),
                },
                {
                  title: '数量',
                  dataIndex: 'quantity',
                  key: 'quantity',
                  render: (quantity: number, record: DefectRecord) => (
                    <InputNumber
                      value={quantity}
                      onChange={(value) => updateDefect(record.id, 'quantity', value || 1)}
                      min={1}
                      style={{ width: '100%' }}
                    />
                  ),
                },
                {
                  title: '描述',
                  dataIndex: 'description',
                  key: 'description',
                  render: (description: string, record: DefectRecord) => (
                    <Input
                      value={description}
                      onChange={(e) => updateDefect(record.id, 'description', e.target.value)}
                      placeholder="缺陷描述"
                    />
                  ),
                },
                {
                  title: '操作',
                  key: 'actions',
                  render: (_, record: DefectRecord) => (
                    <Button
                      type="text"
                      danger
                      icon={<DeleteOutlined />}
                      onClick={() => removeDefect(record.id)}
                    />
                  ),
                },
              ]}
              dataSource={defects}
              rowKey="id"
              pagination={false}
              size="small"
            />
          )}

          <Divider />

          <Form.Item
            name="conclusion"
            label="检验结论"
          >
            <Input.TextArea
              rows={3}
              placeholder="根据检验结果，给出最终检验结论..."
            />
          </Form.Item>

          <Form.Item
            name="recommendations"
            label="改进建议"
          >
            <Input.TextArea
              rows={3}
              placeholder="针对发现的问题，提出改进建议..."
            />
          </Form.Item>

          <Form.Item
            name="attachments"
            label="检验报告附件"
            valuePropName="fileList"
            getValueFromEvent={(e) => {
              if (Array.isArray(e)) {
                return e
              }
              return e?.fileList
            }}
          >
            <Upload.Dragger
              multiple
              action="/api/upload"
              showUploadList={true}
            >
              <p className="ant-upload-drag-icon">
                <UploadOutlined />
              </p>
              <p className="ant-upload-text">点击或拖拽文件到此区域上传</p>
              <p className="ant-upload-hint">
                支持检验报告、照片、检测数据等文件
              </p>
            </Upload.Dragger>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  )
}

export default QualityList