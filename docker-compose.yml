version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: registry.cn-hangzhou.aliyuncs.com/library/postgres:15-alpine
    container_name: weld_postgres
    restart: always
    environment:
      POSTGRES_DB: weld_db
      POSTGRES_USER: weld_user
      POSTGRES_PASSWORD: WeldDB@2024#Secure!Pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      TZ: Asia/Shanghai
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - weld_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U weld_user -d weld_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存
  redis:
    image: registry.cn-hangzhou.aliyuncs.com/library/redis:7-alpine
    container_name: weld_redis
    restart: always
    command: redis-server --requirepass Redis@2024#Strong!Key --appendonly yes
    environment:
      TZ: Asia/Shanghai
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - weld_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 后端 API 服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: weld_backend
    restart: always
    environment:
      - TZ=Asia/Shanghai
    env_file:
      - ./backend/.env.production
    volumes:
      - ./backend:/app
      - backend_uploads:/app/storage/uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - weld_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 前端 - 用户门户
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=https://api.sdhaohan.cn
    container_name: weld_frontend
    restart: always
    volumes:
      - frontend_dist:/app/dist
    networks:
      - weld_network

  # 前端 - 管理门户
  admin-portal:
    build:
      context: ./admin-portal
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=https://api.sdhaohan.cn
    container_name: weld_admin
    restart: always
    volumes:
      - admin_dist:/app/dist
    networks:
      - weld_network

  # Nginx 反向代理和静态文件服务
  nginx:
    image: registry.cn-hangzhou.aliyuncs.com/library/nginx:alpine
    container_name: weld_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/certbot/conf:/etc/letsencrypt:ro
      - ./nginx/certbot/www:/var/www/certbot:ro
      - frontend_dist:/usr/share/nginx/html/frontend:ro
      - admin_dist:/usr/share/nginx/html/admin:ro
      - backend_uploads:/usr/share/nginx/html/uploads:ro
    depends_on:
      - backend
      - frontend
      - admin-portal
    networks:
      - weld_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot - 自动申请和续期 SSL 证书
  certbot:
    image: registry.cn-hangzhou.aliyuncs.com/library/certbot:latest
    container_name: weld_certbot
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - weld_network

networks:
  weld_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  frontend_dist:
    driver: local
  admin_dist:
    driver: local

