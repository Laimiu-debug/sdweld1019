import { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { message } from 'antd';
import authService, { AuthUser } from '@/services/auth';

export const useAuth = () => {
  const [user, setUser] = useState<AuthUser | null>(null);
  const [loading, setLoading] = useState(true);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    const initAuth = () => {
      const currentUser = authService.getCurrentUser();
      const isAuth = authService.isAuthenticated();
      console.log('useAuth initAuth:', {
        currentUser,
        isAuth,
        hasToken: !!localStorage.getItem('admin_token'),
        hasUser: !!localStorage.getItem('admin_user')
      });

      // 更新所有状态
      setUser(currentUser);
      setIsAuthenticated(isAuth);

      if (currentUser && isAuth) {
        console.log('Setting user in auth state:', currentUser);
      } else {
        console.log('User not authenticated or no current user');
      }
      setLoading(false);
    };

    initAuth();
  }, []);

  const login = useCallback(async (username: string, password: string) => {
    setLoading(true);
    try {
      console.log('Login function starting...');
      const success = await authService.login({ username, password });
      console.log('Login result:', success);

      if (success) {
        const currentUser = authService.getCurrentUser();
        const isAuth = authService.isAuthenticated();
        console.log('After login - CurrentUser:', currentUser);
        console.log('After login - IsAuthenticated:', isAuth);

        // 立即更新状态
        setUser(currentUser);
        setIsAuthenticated(isAuth);

        console.log('States updated, navigating to dashboard');
        message.success('登录成功');

        // 直接导航，不使用复杂的useEffect
        navigate('/dashboard');

        return true;
      }
      return false;
    } catch (error) {
      console.error('Login error in useAuth:', error);
      return false;
    } finally {
      setLoading(false);
    }
  }, [navigate]);

  const logout = useCallback(async () => {
    setLoading(true);
    try {
      await authService.logout();
      setUser(null);
      message.success('已退出登录');
      navigate('/login');
    } catch (error) {
      console.error('Logout error:', error);
    } finally {
      setLoading(false);
    }
  }, [navigate]);

  const checkPermission = useCallback((permission: string) => {
    return authService.hasPermission(permission);
  }, []);

  const checkAnyPermission = useCallback((permissions: string[]) => {
    return authService.hasAnyPermission(permissions);
  }, []);

  return {
    user,
    loading,
    isAuthenticated,
    login,
    logout,
    checkPermission,
    checkAnyPermission,
  };
};