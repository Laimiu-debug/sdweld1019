import React, { useState, useEffect } from 'react';
import {
  Card,
  Table,
  Button,
  Space,
  Tag,
  Modal,
  Form,
  Input,
  Select,
  DatePicker,
  Switch,
  message,
  Popconfirm,
  Tooltip,
  Badge,
} from 'antd';
import {
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  EyeOutlined,
  CheckCircleOutlined,
  CloseCircleOutlined,
  InfoCircleOutlined,
  WarningOutlined,
  ToolOutlined,
  ExclamationCircleOutlined,
  ThunderboltOutlined,
  ClockCircleOutlined,
  PercentageOutlined,
} from '@ant-design/icons';
import type { ColumnsType } from 'antd/es/table';
import dayjs from 'dayjs';
import { SystemAnnouncement } from '@/types';
import {
  getAnnouncements,
  createAnnouncement,
  updateAnnouncement,
  deleteAnnouncement,
  publishAnnouncement,
  unpublishAnnouncement,
  CreateAnnouncementData,
  runDailyNotificationTasks,
  runExpiringNotificationTask,
  runQuotaNotificationTask,
} from '@/services/announcements';

const { TextArea } = Input;
const { RangePicker } = DatePicker;

const AnnouncementManagement: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [announcements, setAnnouncements] = useState<SystemAnnouncement[]>([]);
  const [total, setTotal] = useState(0);
  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(20);
  const [modalVisible, setModalVisible] = useState(false);
  const [detailModalVisible, setDetailModalVisible] = useState(false);
  const [editingAnnouncement, setEditingAnnouncement] = useState<SystemAnnouncement | null>(null);
  const [selectedAnnouncement, setSelectedAnnouncement] = useState<SystemAnnouncement | null>(null);
  const [form] = Form.useForm();
  const [filterPublished, setFilterPublished] = useState<boolean | undefined>(undefined);
  const [filterType, setFilterType] = useState<string | undefined>(undefined);
  const [filterAutoGenerated, setFilterAutoGenerated] = useState<boolean | undefined>(undefined);
  const [taskLoading, setTaskLoading] = useState(false);

  // 加载公告列表
  const loadAnnouncements = async () => {
    setLoading(true);
    try {
      const data = await getAnnouncements({
        page,
        page_size: pageSize,
        is_published: filterPublished,
        announcement_type: filterType,
        is_auto_generated: filterAutoGenerated,
      });
      setAnnouncements(data.items);
      setTotal(data.total);
    } catch (error) {
      message.error('加载公告列表失败');
      console.error('加载公告失败:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadAnnouncements();
  }, [page, pageSize, filterPublished, filterType, filterAutoGenerated]);

  // 获取类型图标
  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'info':
        return <InfoCircleOutlined style={{ color: '#1890ff' }} />;
      case 'warning':
        return <WarningOutlined style={{ color: '#faad14' }} />;
      case 'error':
        return <CloseCircleOutlined style={{ color: '#ff4d4f' }} />;
      case 'success':
        return <CheckCircleOutlined style={{ color: '#52c41a' }} />;
      case 'maintenance':
        return <ToolOutlined style={{ color: '#722ed1' }} />;
      default:
        return <InfoCircleOutlined style={{ color: '#1890ff' }} />;
    }
  };

  // 获取类型标签
  const getTypeTag = (type: string) => {
    const config: Record<string, { color: string; text: string }> = {
      info: { color: 'blue', text: '信息' },
      warning: { color: 'orange', text: '警告' },
      error: { color: 'red', text: '错误' },
      success: { color: 'green', text: '成功' },
      maintenance: { color: 'purple', text: '维护' },
    };
    const { color, text } = config[type] || config.info;
    return <Tag color={color}>{text}</Tag>;
  };

  // 获取优先级标签
  const getPriorityTag = (priority: string) => {
    const config: Record<string, { color: string; text: string }> = {
      urgent: { color: 'red', text: '紧急' },
      high: { color: 'orange', text: '重要' },
      normal: { color: 'default', text: '普通' },
      low: { color: 'default', text: '低' },
    };
    const { color, text } = config[priority] || config.normal;
    return <Tag color={color}>{text}</Tag>;
  };

  // 获取目标受众标签
  const getAudienceTag = (audience: string) => {
    const config: Record<string, { color: string; text: string }> = {
      all: { color: 'blue', text: '所有用户' },
      user: { color: 'green', text: '个人用户' },
      enterprise: { color: 'purple', text: '企业用户' },
    };
    const { color, text } = config[audience] || config.all;
    return <Tag color={color}>{text}</Tag>;
  };

  // 打开创建/编辑弹窗
  const handleOpenModal = (announcement?: SystemAnnouncement) => {
    if (announcement) {
      setEditingAnnouncement(announcement);
      form.setFieldsValue({
        title: announcement.title,
        content: announcement.content,
        announcement_type: announcement.announcement_type,
        priority: announcement.priority,
        target_audience: announcement.target_audience,
        is_pinned: announcement.is_pinned,
        publish_time: announcement.publish_at && announcement.expire_at
          ? [dayjs(announcement.publish_at), dayjs(announcement.expire_at)]
          : undefined,
      });
    } else {
      setEditingAnnouncement(null);
      form.resetFields();
    }
    setModalVisible(true);
  };

  // 关闭弹窗
  const handleCloseModal = () => {
    setModalVisible(false);
    setEditingAnnouncement(null);
    form.resetFields();
  };

  // 提交表单
  const handleSubmit = async () => {
    try {
      const values = await form.validateFields();
      const data: CreateAnnouncementData = {
        title: values.title,
        content: values.content,
        announcement_type: values.announcement_type,
        priority: values.priority,
        target_audience: values.target_audience,
        is_pinned: values.is_pinned || false,
        publish_at: values.publish_time?.[0]?.toISOString(),
        expire_at: values.publish_time?.[1]?.toISOString(),
      };

      if (editingAnnouncement) {
        await updateAnnouncement(editingAnnouncement.id, data);
        message.success('更新公告成功');
      } else {
        await createAnnouncement(data);
        message.success('创建公告成功');
      }

      handleCloseModal();
      loadAnnouncements();
    } catch (error) {
      console.error('提交失败:', error);
      if (error instanceof Error) {
        message.error(error.message || '操作失败');
      }
    }
  };

  // 删除公告
  const handleDelete = async (id: number) => {
    try {
      await deleteAnnouncement(id);
      message.success('删除成功');
      loadAnnouncements();
    } catch (error) {
      message.error('删除失败');
      console.error('删除失败:', error);
    }
  };

  // 发布/取消发布
  const handleTogglePublish = async (announcement: SystemAnnouncement) => {
    try {
      if (announcement.is_published) {
        await unpublishAnnouncement(announcement.id);
        message.success('已取消发布');
      } else {
        await publishAnnouncement(announcement.id);
        message.success('发布成功');
      }
      loadAnnouncements();
    } catch (error) {
      message.error('操作失败');
      console.error('发布/取消发布失败:', error);
    }
  };

  // 查看详情
  const handleViewDetail = (announcement: SystemAnnouncement) => {
    setSelectedAnnouncement(announcement);
    setDetailModalVisible(true);
  };

  // ==================== 自动通知任务 ====================

  // 运行每日通知任务
  const handleRunDailyTasks = async () => {
    setTaskLoading(true);
    try {
      const result = await runDailyNotificationTasks();
      message.success(
        `每日通知任务执行完成！共发送 ${result.total_notifications} 条通知\n` +
        `会员到期提醒: ${result.expiring_count} 条\n` +
        `过期处理: ${result.expired_count} 条\n` +
        `自动续费: ${result.renewed_count} 条\n` +
        `配额警告: ${result.quota_count} 条`,
        5
      );
      loadAnnouncements(); // 刷新公告列表
    } catch (error) {
      message.error('执行每日通知任务失败');
      console.error('执行每日通知任务失败:', error);
    } finally {
      setTaskLoading(false);
    }
  };

  // 运行会员到期提醒任务
  const handleRunExpiringTask = async (daysAhead: number) => {
    setTaskLoading(true);
    try {
      const result = await runExpiringNotificationTask(daysAhead);
      message.success(`已发送 ${result.count} 条会员到期提醒（提前${daysAhead}天）`);
      loadAnnouncements();
    } catch (error) {
      message.error('执行会员到期提醒任务失败');
      console.error('执行会员到期提醒任务失败:', error);
    } finally {
      setTaskLoading(false);
    }
  };

  // 运行配额警告任务
  const handleRunQuotaTask = async () => {
    setTaskLoading(true);
    try {
      const result = await runQuotaNotificationTask();
      message.success(`已发送 ${result.count} 条配额警告`);
      loadAnnouncements();
    } catch (error) {
      message.error('执行配额警告任务失败');
      console.error('执行配额警告任务失败:', error);
    } finally {
      setTaskLoading(false);
    }
  };

  // 表格列定义
  const columns: ColumnsType<SystemAnnouncement> = [
    {
      title: 'ID',
      dataIndex: 'id',
      key: 'id',
      width: 80,
    },
    {
      title: '标题',
      dataIndex: 'title',
      key: 'title',
      width: 250,
      render: (text, record) => (
        <Space>
          {getTypeIcon(record.announcement_type)}
          <span>{text}</span>
          {record.is_pinned && <Tag color="blue">置顶</Tag>}
        </Space>
      ),
    },
    {
      title: '内容',
      dataIndex: 'content',
      key: 'content',
      ellipsis: true,
      width: 300,
    },
    {
      title: '类型',
      dataIndex: 'announcement_type',
      key: 'announcement_type',
      width: 100,
      render: (type) => getTypeTag(type),
    },
    {
      title: '优先级',
      dataIndex: 'priority',
      key: 'priority',
      width: 100,
      render: (priority) => getPriorityTag(priority),
    },
    {
      title: '目标受众',
      dataIndex: 'target_audience',
      key: 'target_audience',
      width: 120,
      render: (audience) => getAudienceTag(audience),
    },
    {
      title: '发布状态',
      dataIndex: 'is_published',
      key: 'is_published',
      width: 100,
      render: (isPublished) => (
        <Badge
          status={isPublished ? 'success' : 'default'}
          text={isPublished ? '已发布' : '草稿'}
        />
      ),
    },
    {
      title: '来源',
      dataIndex: 'is_auto_generated',
      key: 'is_auto_generated',
      width: 100,
      render: (isAuto) => (
        <Tag color={isAuto ? 'blue' : 'green'}>
          {isAuto ? '系统自动' : '手动创建'}
        </Tag>
      ),
    },
    {
      title: '发布时间',
      dataIndex: 'publish_at',
      key: 'publish_at',
      width: 180,
      render: (time) => time ? dayjs(time).format('YYYY-MM-DD HH:mm') : '-',
    },
    {
      title: '过期时间',
      dataIndex: 'expire_at',
      key: 'expire_at',
      width: 180,
      render: (time) => time ? dayjs(time).format('YYYY-MM-DD HH:mm') : '-',
    },
    {
      title: '浏览量',
      dataIndex: 'view_count',
      key: 'view_count',
      width: 100,
    },
    {
      title: '操作',
      key: 'action',
      fixed: 'right',
      width: 280,
      render: (_, record) => (
        <Space size="small">
          <Tooltip title="查看详情">
            <Button
              type="text"
              size="small"
              icon={<EyeOutlined />}
              onClick={() => handleViewDetail(record)}
            />
          </Tooltip>
          <Tooltip title="编辑">
            <Button
              type="text"
              size="small"
              icon={<EditOutlined />}
              onClick={() => handleOpenModal(record)}
            />
          </Tooltip>
          <Tooltip title={record.is_published ? '取消发布' : '发布'}>
            <Button
              type="text"
              size="small"
              icon={record.is_published ? <CloseCircleOutlined /> : <CheckCircleOutlined />}
              onClick={() => handleTogglePublish(record)}
            />
          </Tooltip>
          <Popconfirm
            title="确定要删除这条公告吗？"
            onConfirm={() => handleDelete(record.id)}
            okText="确定"
            cancelText="取消"
          >
            <Tooltip title="删除">
              <Button
                type="text"
                size="small"
                danger
                icon={<DeleteOutlined />}
              />
            </Tooltip>
          </Popconfirm>
        </Space>
      ),
    },
  ];

  return (
    <div>
      <div className="admin-header">
        <h1 className="page-title">公告管理</h1>
      </div>

      {/* 自动通知任务卡片 */}
      <Card
        size="small"
        title={
          <Space>
            <ThunderboltOutlined />
            自动通知任务
          </Space>
        }
        style={{ marginBottom: 16 }}
      >
        <Space wrap>
          <Tooltip title="执行所有自动通知任务：会员到期提醒、过期处理、自动续费、配额警告">
            <Button
              type="primary"
              icon={<ThunderboltOutlined />}
              onClick={handleRunDailyTasks}
              loading={taskLoading}
            >
              运行每日任务
            </Button>
          </Tooltip>
          <Tooltip title="发送会员到期提醒（提前7天）">
            <Button
              icon={<ClockCircleOutlined />}
              onClick={() => handleRunExpiringTask(7)}
              loading={taskLoading}
            >
              到期提醒(7天)
            </Button>
          </Tooltip>
          <Tooltip title="发送会员到期提醒（提前3天）">
            <Button
              icon={<ClockCircleOutlined />}
              onClick={() => handleRunExpiringTask(3)}
              loading={taskLoading}
            >
              到期提醒(3天)
            </Button>
          </Tooltip>
          <Tooltip title="发送会员到期提醒（提前1天）">
            <Button
              icon={<ClockCircleOutlined />}
              onClick={() => handleRunExpiringTask(1)}
              loading={taskLoading}
              danger
            >
              到期提醒(1天)
            </Button>
          </Tooltip>
          <Tooltip title="检查并发送配额使用警告">
            <Button
              icon={<PercentageOutlined />}
              onClick={handleRunQuotaTask}
              loading={taskLoading}
            >
              配额警告
            </Button>
          </Tooltip>
        </Space>
      </Card>

      {/* 公告管理卡片 */}
      <Card>
        {/* 筛选和操作栏 */}
        <Space style={{ marginBottom: 16 }} wrap>
          <Button
            type="primary"
            icon={<PlusOutlined />}
            onClick={() => handleOpenModal()}
          >
            创建公告
          </Button>
          <Select
            placeholder="发布状态"
            style={{ width: 120 }}
            allowClear
            value={filterPublished}
            onChange={setFilterPublished}
          >
            <Select.Option value={true}>已发布</Select.Option>
            <Select.Option value={false}>草稿</Select.Option>
          </Select>
          <Select
            placeholder="公告类型"
            style={{ width: 120 }}
            allowClear
            value={filterType}
            onChange={setFilterType}
          >
            <Select.Option value="info">信息</Select.Option>
            <Select.Option value="warning">警告</Select.Option>
            <Select.Option value="error">错误</Select.Option>
            <Select.Option value="success">成功</Select.Option>
            <Select.Option value="maintenance">维护</Select.Option>
          </Select>
          <Select
            placeholder="公告来源"
            style={{ width: 140 }}
            allowClear
            value={filterAutoGenerated}
            onChange={setFilterAutoGenerated}
          >
            <Select.Option value={false}>手动创建</Select.Option>
            <Select.Option value={true}>自动生成</Select.Option>
          </Select>
        </Space>

        {/* 公告列表表格 */}
        <Table
          columns={columns}
          dataSource={announcements}
          rowKey="id"
          loading={loading}
          scroll={{ x: 1800 }}
          pagination={{
            current: page,
            pageSize: pageSize,
            total: total,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total) => `共 ${total} 条`,
            onChange: (page, pageSize) => {
              setPage(page);
              setPageSize(pageSize);
            },
          }}
        />
      </Card>

      {/* 创建/编辑公告弹窗 */}
      <Modal
        title={editingAnnouncement ? '编辑公告' : '创建公告'}
        open={modalVisible}
        onOk={handleSubmit}
        onCancel={handleCloseModal}
        width={800}
        okText="提交"
        cancelText="取消"
      >
        <Form
          form={form}
          layout="vertical"
          initialValues={{
            announcement_type: 'info',
            priority: 'normal',
            target_audience: 'all',
            is_pinned: false,
          }}
        >
          <Form.Item
            label="公告标题"
            name="title"
            rules={[{ required: true, message: '请输入公告标题' }]}
          >
            <Input placeholder="请输入公告标题" maxLength={255} />
          </Form.Item>

          <Form.Item
            label="公告内容"
            name="content"
            rules={[{ required: true, message: '请输入公告内容' }]}
          >
            <TextArea
              placeholder="请输入公告内容"
              rows={6}
              maxLength={5000}
              showCount
            />
          </Form.Item>

          <Space style={{ width: '100%' }} size="large">
            <Form.Item
              label="公告类型"
              name="announcement_type"
              rules={[{ required: true, message: '请选择公告类型' }]}
            >
              <Select style={{ width: 150 }}>
                <Select.Option value="info">
                  <Space>
                    <InfoCircleOutlined style={{ color: '#1890ff' }} />
                    信息
                  </Space>
                </Select.Option>
                <Select.Option value="warning">
                  <Space>
                    <WarningOutlined style={{ color: '#faad14' }} />
                    警告
                  </Space>
                </Select.Option>
                <Select.Option value="error">
                  <Space>
                    <CloseCircleOutlined style={{ color: '#ff4d4f' }} />
                    错误
                  </Space>
                </Select.Option>
                <Select.Option value="success">
                  <Space>
                    <CheckCircleOutlined style={{ color: '#52c41a' }} />
                    成功
                  </Space>
                </Select.Option>
                <Select.Option value="maintenance">
                  <Space>
                    <ToolOutlined style={{ color: '#722ed1' }} />
                    维护
                  </Space>
                </Select.Option>
              </Select>
            </Form.Item>

            <Form.Item
              label="优先级"
              name="priority"
              rules={[{ required: true, message: '请选择优先级' }]}
            >
              <Select style={{ width: 150 }}>
                <Select.Option value="low">低</Select.Option>
                <Select.Option value="normal">普通</Select.Option>
                <Select.Option value="high">重要</Select.Option>
                <Select.Option value="urgent">紧急</Select.Option>
              </Select>
            </Form.Item>

            <Form.Item
              label="目标受众"
              name="target_audience"
              rules={[{ required: true, message: '请选择目标受众' }]}
            >
              <Select style={{ width: 150 }}>
                <Select.Option value="all">所有用户</Select.Option>
                <Select.Option value="user">个人用户</Select.Option>
                <Select.Option value="enterprise">企业用户</Select.Option>
              </Select>
            </Form.Item>
          </Space>

          <Form.Item
            label="发布和过期时间"
            name="publish_time"
            tooltip="如果不设置，公告将立即发布且永不过期"
          >
            <RangePicker
              showTime
              format="YYYY-MM-DD HH:mm"
              style={{ width: '100%' }}
              placeholder={['发布时间', '过期时间']}
            />
          </Form.Item>

          <Form.Item
            label="置顶显示"
            name="is_pinned"
            valuePropName="checked"
          >
            <Switch />
          </Form.Item>
        </Form>
      </Modal>

      {/* 公告详情弹窗 */}
      <Modal
        title={
          <Space>
            {selectedAnnouncement && getTypeIcon(selectedAnnouncement.announcement_type)}
            <span>{selectedAnnouncement?.title}</span>
            {selectedAnnouncement?.is_pinned && <Tag color="blue">置顶</Tag>}
          </Space>
        }
        open={detailModalVisible}
        onCancel={() => setDetailModalVisible(false)}
        footer={[
          <Button key="close" onClick={() => setDetailModalVisible(false)}>
            关闭
          </Button>,
        ]}
        width={700}
      >
        {selectedAnnouncement && (
          <Space direction="vertical" size={16} style={{ width: '100%' }}>
            {/* 公告内容 */}
            <div>
              <strong>公告内容：</strong>
              <div
                style={{
                  marginTop: 8,
                  padding: 12,
                  background: '#f5f5f5',
                  borderRadius: 4,
                  whiteSpace: 'pre-wrap',
                  lineHeight: 1.6,
                }}
              >
                {selectedAnnouncement.content}
              </div>
            </div>

            {/* 公告信息 */}
            <Space direction="vertical" size={8} style={{ width: '100%' }}>
              <div>
                <strong>公告类型：</strong>
                {getTypeTag(selectedAnnouncement.announcement_type)}
              </div>
              <div>
                <strong>优先级：</strong>
                {getPriorityTag(selectedAnnouncement.priority)}
              </div>
              <div>
                <strong>目标受众：</strong>
                {getAudienceTag(selectedAnnouncement.target_audience)}
              </div>
              <div>
                <strong>发布状态：</strong>
                <Badge
                  status={selectedAnnouncement.is_published ? 'success' : 'default'}
                  text={selectedAnnouncement.is_published ? '已发布' : '草稿'}
                />
              </div>
              {selectedAnnouncement.publish_at && (
                <div>
                  <strong>发布时间：</strong>
                  {dayjs(selectedAnnouncement.publish_at).format('YYYY-MM-DD HH:mm:ss')}
                </div>
              )}
              {selectedAnnouncement.expire_at && (
                <div>
                  <strong>过期时间：</strong>
                  {dayjs(selectedAnnouncement.expire_at).format('YYYY-MM-DD HH:mm:ss')}
                </div>
              )}
              <div>
                <strong>浏览量：</strong>
                {selectedAnnouncement.view_count}
              </div>
              <div>
                <strong>创建时间：</strong>
                {dayjs(selectedAnnouncement.created_at).format('YYYY-MM-DD HH:mm:ss')}
              </div>
              {selectedAnnouncement.updated_at && (
                <div>
                  <strong>更新时间：</strong>
                  {dayjs(selectedAnnouncement.updated_at).format('YYYY-MM-DD HH:mm:ss')}
                </div>
              )}
            </Space>
          </Space>
        )}
      </Modal>
    </div>
  );
};

export default AnnouncementManagement;